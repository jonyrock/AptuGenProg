/**
 * generated by Xtext
 */
package org.xtext.example.mydsl.generator;

import com.google.common.collect.Iterators;
import java.util.Iterator;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.xtext.example.mydsl.subGrLang.FollowRecord;
import org.xtext.example.mydsl.subGrLang.Person;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class SubGrLangGenerator implements IGenerator {
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    URI _uRI = resource.getURI();
    String _lastSegment = _uRI.lastSegment();
    String _plus = (_lastSegment + ".xml");
    String _compile = this.compile(resource);
    fsa.generateFile(_plus, _compile);
  }
  
  public String compile(final Resource resource) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\"?>");
    String _plus = (_builder.toString() + "\n");
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("<persons>");
    String _plus_1 = (_plus + _builder_1);
    String _plus_2 = (_plus_1 + "\n");
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterator<Person> _filter = Iterators.<Person>filter(_allContents, Person.class);
    final Function1<Person,String> _function = new Function1<Person,String>() {
      public String apply(final Person it) {
        return SubGrLangGenerator.this.compile(it);
      }
    };
    Iterator<String> _map = IteratorExtensions.<Person, String>map(_filter, _function);
    String _join = IteratorExtensions.join(_map, "\n");
    String _plus_3 = (_plus_2 + _join);
    String _plus_4 = (_plus_3 + "\n");
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("</persons>");
    return (_plus_4 + _builder_2);
  }
  
  public String compile(final Person p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("  ");
    _builder.append("<person name=\"");
    String _name = p.getName();
    _builder.append(_name, "  ");
    _builder.append("\">");
    EList<FollowRecord> _following = p.getFollowing();
    final Function1<FollowRecord,String> _function = new Function1<FollowRecord,String>() {
      public String apply(final FollowRecord it) {
        return SubGrLangGenerator.this.compile(it);
      }
    };
    List<String> _map = ListExtensions.<FollowRecord, String>map(_following, _function);
    String _join = IterableExtensions.join(_map, "");
    String _plus = (_builder.toString() + _join);
    String _plus_1 = (_plus + "\n");
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("  ");
    _builder_1.append("<person>");
    return (_plus_1 + _builder_1);
  }
  
  public String compile(final FollowRecord r) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("    ");
    _builder.append("<follow person=\"");
    Person _person = r.getPerson();
    String _name = _person.getName();
    _builder.append(_name, "    ");
    _builder.append("\"/>");
    return ("\n" + _builder);
  }
}
